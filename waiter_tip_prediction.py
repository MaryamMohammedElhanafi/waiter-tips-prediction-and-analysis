# -*- coding: utf-8 -*-
"""waiter_tip_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TDNaDhByuYWMebdhwMuW8cvikbiC6cI_
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

df = pd.read_csv('tips.csv')
df.head()

df.isnull().sum()

"""thera is no null values.

"""

print(df[df.duplicated()])

#data_frame = data_frame.drop_duplicates(inplace=True)

import plotly.express as px
fig = px.bar( data_frame = df, x= "sex", y= "tip")
fig.update_traces(width= 0.2)
fig.show()

fig = px.histogram(df, x="sex")
fig.show()

"""most tips are given by men maybe due to the number of men is greater than number of female."""

fig = px.bar( data_frame = df, x= "smoker", y= "tip")
fig.update_traces(width= 0.2)
fig.show()

"""tips given by non smokers is greater than the smokers"""

fig = px.bar( data_frame = df, x= "day", y= "tip")
fig.update_traces(width= 0.2)
fig.show()

"""the sat day has the largest tips in the week"""

fig = px.bar( data_frame = df, x= "size", y= "tip")
fig.update_traces(width= 0.2)
fig.show()

fig = px.bar( data_frame = df, x= "time", y= "tip")
fig.update_traces(width= 0.2)
fig.show()

"""tips given by peaple in dinner is larger than lunch, maybe due to peaple who eat dinner in the restaurant larger than peaple who eat lunch."""

fig = px.bar( data_frame = df, x= "total_bill", y= "tip")
fig.update_traces(width= 0.2)
fig.show()

fig = px.scatter(data_frame= df, x= "total_bill",y= "tip")
fig.show()

df["sex"] = df["sex"].map({"Female":0, "Male":1})
df["smoker"] = df["smoker"].map({"No":0, "Yes":1})
df["day"] = df["day"].map({"Sat":0, "Sun":1, "Thur":2, "Fri":3})
df["time"] = df["time"].map({"Lunch":0, "Dinner":1})

x = df.drop(["tip"], axis= 1)
y= df["tip"]
y.head()

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state= 42)

from sklearn.linear_model import LinearRegression
model = LinearRegression()
model.fit(x_train, y_train)

y_pred = model.predict(x_test)

from sklearn.metrics import mean_absolute_error

mae = mean_absolute_error(y_true=y_test,y_pred=y_pred)
print(mae)